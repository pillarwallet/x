import{d as g,c as k,e as O}from"./index-BahxWbKI.js";import{s as w,H as p}from"./mock-D90BqPQG.js";import{B as l,ac as y,i as h,I as m,q as L,x as E}from"./main-CDKDnvW7.js";import"./transactionReceipt-C8NQNoJZ.js";import"./index-BGP_I33A.js";class x extends l{constructor({callbackSelector:e,cause:r,data:n,extraData:c,sender:d,urls:t}){var i;super(r.shortMessage||"An error occurred while fetching for an offchain result.",{cause:r,metaMessages:[...r.metaMessages||[],(i=r.metaMessages)!=null&&i.length?"":[],"Offchain Gateway Call:",t&&["  Gateway URL(s):",...t.map(f=>`    ${y(f)}`)],`  Sender: ${d}`,`  Data: ${n}`,`  Callback selector: ${e}`,`  Extra data: ${c}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class M extends l{constructor({result:e,url:r}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${y(r)}`,`Response: ${w(e)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class R extends l{constructor({sender:e,to:r}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${r}`,`OffchainLookup sender address: ${e}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}function $(o,e){if(!h(o,{strict:!1}))throw new m({address:o});if(!h(e,{strict:!1}))throw new m({address:e});return o.toLowerCase()===e.toLowerCase()}const T="0x556f1830",S={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function G(o,{blockNumber:e,blockTag:r,data:n,to:c}){const{args:d}=g({data:n,abi:[S]}),[t,i,f,a,s]=d;try{if(!$(c,t))throw new R({sender:t,to:c});const u=await A({data:f,sender:t,urls:i}),{data:b}=await k(o,{blockNumber:e,blockTag:r,data:L([a,O([{type:"bytes"},{type:"bytes"}],[u,s])]),to:c});return b}catch(u){throw new x({callbackSelector:a,cause:u,data:n,extraData:s,sender:t,urls:i})}}async function A({data:o,sender:e,urls:r}){var c;let n=new Error("An unknown error occurred.");for(let d=0;d<r.length;d++){const t=r[d],i=t.includes("{data}")?"GET":"POST",f=i==="POST"?{data:o,sender:e}:void 0;try{const a=await fetch(t.replace("{sender}",e).replace("{data}",o),{body:JSON.stringify(f),method:i});let s;if((c=a.headers.get("Content-Type"))!=null&&c.startsWith("application/json")?s=(await a.json()).data:s=await a.text(),!a.ok){n=new p({body:f,details:s!=null&&s.error?w(s.error):a.statusText,headers:a.headers,status:a.status,url:t});continue}if(!E(s)){n=new M({result:s,url:t});continue}return s}catch(a){n=new p({body:f,details:a.message,url:t})}}throw n}export{A as ccipFetch,G as offchainLookup,S as offchainLookupAbiItem,T as offchainLookupSignature};
