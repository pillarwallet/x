version: 2.1

orbs:
  slack: circleci/slack@3.4.2

jobs:
  e2e-playwright:
    working_directory: ~/x
    docker:
      - image: cypress/included:cypress-13.15.1-node-20.18.0-chrome-130.0.6723.69-1-ff-131.0.3-edge-130.0.2849.52-1
    resource_class: xlarge
    steps:
      - checkout

      - run:
          name: Install jq
          command: |
            apt-get update && apt-get install -y curl jq

      - run:
          name: Checkout x-e2e repo and run Playwright tests
          no_output_timeout: 90m
          command: |
            cd ~
            git clone -b pillarx-playwright --single-branch https://$GITHUB_TOKEN@github.com/pillarwallet/x-e2e.git
            cd x-e2e
            git pull 
            # Inject environment variables into .env file
            sed -i "s|base_url_value|$BASE_URL|g" .env
            sed -i "s|dry_run_value|$DRY_RUN|g" .env
            sed -i "s|master_email_value|$MASTER_EMAIL|g" .env
            sed -i "s|master_wallet_value|$MASTER_WALLET|g" .env
            sed -i "s|testmail_api_key_value|$TESTMAIL_API_KEY|g" .env
            sed -i "s|testmail_namespace_value|$TESTMAIL_NAMESPACE|g" .env
            sed -i "s|recovery_recipient_address_value|$RECOVERY_RECIPIENT_ADDRESS|g" .env
            sed -i "s|minimum_amount_value|$MINIMUM_AMOUNT|g" .env
            sed -i "s|headless_value|$HEADLESS|g" .env
            sed -i "s|timeout_value|$TIMEOUT|g" .env
            sed -i "s|debug_value|$DEBUG|g" .env
            sed -i "s|ci_value|$CI|g" .env
            sed -i "s|headed_value|$HEADED|g" .env
            sed -i "s|sushi_url_value|$SUSHI_URL|g" .env
            sed -i "s|staging_url_value|$STAGING_URL|g" .env
            sed -i "s|testmail_username_value|$TESTMAIL_USERNAME|g" .env
            sed -i "s|testmail_email_value|$TESTMAIL_EMAIL|g" .env
            npm install
            npx playwright install
            # Run tests with html + json reporters
            npm run test:metamask -- --reporter=list,html,json

      - run:
          name: Move Playwright reports
          when: always
          command: |
            echo "Contents of test-results before move:"
            ls -lah /root/x-e2e/test-results/ || true
            echo "Contents of project root before move:"
            ls -lah /root/x-e2e/ || true
      
            # Move test results (JSON, traces, screenshots)
            if [ -d "/root/x-e2e/test-results" ]; then
              mv /root/x-e2e/test-results /tmp/test-results
              chmod 777 -R /tmp/test-results
            fi
      
            # Move HTML report
            if [ -d "/root/x-e2e/playwright-report" ]; then
              mv /root/x-e2e/playwright-report /tmp/playwright-report
              chmod 777 -R /tmp/playwright-report
            fi

      - store_artifacts:
          path: /tmp/test-results
          when: always
      
      - store_artifacts:
          path: /tmp/playwright-report
          when: always

      - run:
          name: Parse Playwright results and send Slack notification
          when: always
          command: |
            RESULTS_FILE="/tmp/test-results/results.json"
      
            if [ ! -f "$RESULTS_FILE" ]; then
              echo "Playwright results JSON not found at $RESULTS_FILE"
              exit 0
            fi
      
            TOTAL_TESTS=$(jq '.stats.total' $RESULTS_FILE)
            TOTAL_PASSES=$(jq '.stats.expected' $RESULTS_FILE)
            TOTAL_FAILURES=$(jq '.stats.unexpected' $RESULTS_FILE)
            TOTAL_SKIPPED=$(jq '.stats.skipped' $RESULTS_FILE)
      
            FAILED_TESTS_FILE=failed-tests.txt
            jq -r '
              .suites[].specs[]?
              | select(.tests[]?.outcome=="unexpected")
              | "*Suite:* \(.title)\n*Failing Tests:* \(.tests[]? | select(.outcome=="unexpected") | .title)"
            ' $RESULTS_FILE > $FAILED_TESTS_FILE
      
            if [ -s $FAILED_TESTS_FILE ]; then
              MESSAGE=$(cat $FAILED_TESTS_FILE)
              SLACK_MESSAGE=$(cat <<'EOF'
      :x: *Playwright UI Tests Failed :x:*
      *Project:* ${CIRCLE_PROJECT_REPONAME}
      *Triggered by:* ${CIRCLE_USERNAME}
      *Branch:* ${CIRCLE_BRANCH}
      *Commit:* <https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|${CIRCLE_SHA1}>
      
      *Test Summary:*
      *Total Tests:* ${TOTAL_TESTS}
      *Passes:* ${TOTAL_PASSES}
      *Failures:* ${TOTAL_FAILURES}
      *Skipped:* ${TOTAL_SKIPPED}
      
      *Failed Tests:*
      ${MESSAGE}
      *Report:* <https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/tmp/playwright-report/index.html|View HTML Report>
      *Job:* <https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}|View Job>
      cc: ${TAG_RESPONSIBLE_PEOPLE}
      EOF
      )
            else
              SLACK_MESSAGE=$(cat <<'EOF'
      :white_check_mark: All Playwright UI tests passed
      *Project:* ${CIRCLE_PROJECT_REPONAME}
      *Triggered by:* ${CIRCLE_USERNAME}
      *Branch:* ${CIRCLE_BRANCH}
      *Commit:* <https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}|${CIRCLE_SHA1}>
      *Job:* <https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}|View Job>
      
      *Test Summary:*
      *Total Tests:* ${TOTAL_TESTS}
      *Passes:* ${TOTAL_PASSES}
      *Failures:* ${TOTAL_FAILURES}
      *Skipped:* ${TOTAL_SKIPPED}
      *Report:* <https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/tmp/playwright-report/index.html|View HTML Report>
      EOF
      )
            fi
      
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"${SLACK_MESSAGE}\"}" $E2E_SLACK_WEBHOOK_URL


workflows:
  version: 2
  pr_triggered_e2e_tests:
    jobs:
      - e2e-playwright
